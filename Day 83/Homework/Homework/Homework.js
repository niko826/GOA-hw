// npm = Node Package Manager
// ეს არის Node.js - ის პაკეტების მენეჯერი.
// მისი საშუალებით შეგვიძლია:
// 1) გადავწეროთ უცხო ბიბლიოთეკები/მოდულები (მაგალითად: express, chalk, nodemon)
// 2) გავამართოთ ჩვენი პროექტის დამოკიდებულებები (dependencies)
// 3) დავწეროთ scripts (მაგ: "start", "dev")
// მოკლედ, npm არის როგორც "აპლიკაციების მაღაზია" Node.js-თვის.


// ============================
// package.json
//
// ეს ფაილი ავტომატურად იქმნება (npm init ან npm init -y ბრძანებით).
// მასში ინახება ინფორმაცია პროექტზე:
// - პროექტის სახელი, ვერსია, ავტორი
// - scripts (რომლებიც node-ს ან npm-ს ბრძანებებს ასრულებენ)
// - dependencies (ბიბლიოთეკები, რომლებიც პროექტში გჭირდება)
//
// მაგალითად:
// "dependencies": {
//   "express": "^4.18.2",
//   "chalk": "^5.3.0"
// }


// ============================
// package-lock.json
//
// ეს ფაილი ავტომატურად იქმნება, როცა პირველად გადმოწერ dependencies.
// ის ზუსტად ინახავს რა ვერსია ჩამოიტვირთა თითოეულ მოდულზე,
// რომ შემდეგში იგივე ვერსიები გამოიყენოს (სტაბილურობისთვის).
//
// package.json → ზოგადი მოთხოვნები ("express": "^4.18.0")
// package-lock.json → ზუსტი ვერსია ("express": "4.18.2")


// ============================
// node_modules
//
// ეს არის საქაღალდე სადაც npm ჩამოტვირთავს ყველა ბიბლიოთეკას.
// მაგალითად, თუ დააინსტალირებ chalk-ს, ის იქნება აქ.
// ეს საქაღალდე ავტომატურად იქმნება და ჩვეულებრივ GitHub-ზე არ იტვირთება
// რადგან package.json და package-lock.json საკმარისია,
// რომ npm install-ის შემდეგ ისევ ჩამოიტვირთოს node_modules.


// ============================
// import / export VS module.exports / require
//
// Node.js ორ სისტემას იყენებს მოდულებისთვის:
//
// 1) CommonJS (ძველი სისტემა)
//    - module.exports = {...}  → გატანა (export)
//    - const smth = require('./file') → შემოტანა (import)
//
// 2) ES Modules (თანამედროვე, იგივე რაც ბრაუზერში)
//    - export default function(){}
//    - import smth from './file.js'
//
// განსხვავება:
// - CommonJS მუშაობს ძველ პროექტებში (Node.js ნაგულისხმევად იყენებდა ადრე).
// - ES Modules უფრო თანამედროვეა და უნდა ჩართო "type": "module" package.json-ში,
//   ან ფაილი .mjs გაფართოებით გამოიყენო.
